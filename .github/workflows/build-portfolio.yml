name: Build and Deploy Portfolio Data

on:
  push:
    branches:
      - main # Or your default branch
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Updated
        with:
          node-version: '20'

      - name: Create private_repo_data.json
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_FOR_PAGES }} <-- THIS IS THE REFERENCE
        run: |
          # Your Node.js script
          cat << 'EOF' > generate_private_data.js
          const https = require('https');
          const fs = require('fs');
          const token = process.env.GH_TOKEN;
          if (!token) {
              console.warn('GH_TOKEN not found. Creating empty private_repo_data.json.');
              fs.writeFileSync('private_repo_data.json', JSON.stringify([]));
              process.exit(0);
          }
          const options = {
              hostname: 'api.github.com',
              // IMPORTANT: Make sure this path correctly fetches data for Envoyofhell
              // e.g., for your own private repos: /user/repos?type=private&sort=updated&per_page=50
              // e.g., for a specific org: /orgs/YOUR_ORG_NAME/repos?type=private...
              path: '/user/repos?type=private&visibility=private&sort=updated&per_page=50', // Example for user's private repos
              method: 'GET',
              headers: {
                  'Authorization': `token ${token}`,
                  'User-Agent': 'GitHub-Action-Portfolio-Builder',
                  'Accept': 'application/vnd.github.v3+json'
              }
          };
          https.get(options, (res) => {
              let data = '';
              res.on('data', (chunk) => { data += chunk; });
              res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                      try {
                          const repos = JSON.parse(data);
                          const privateRepoInfo = repos.map(repo => ({
                              name: repo.name,
                              html_url: repo.html_url,
                              homepage: repo.homepage || null
                          }));
                          fs.writeFileSync('private_repo_data.json', JSON.stringify(privateRepoInfo, null, 2));
                          console.log('Successfully generated private_repo_data.json with ' + privateRepoInfo.length + ' repos.');
                      } catch (e) {
                          console.error('Error parsing JSON or writing file:', e);
                          fs.writeFileSync('private_repo_data.json', JSON.stringify([]));
                      }
                  } else {
                      console.error(`GitHub API for private repos responded with ${res.statusCode}: ${data}`);
                      fs.writeFileSync('private_repo_data.json', JSON.stringify([]));
                  }
              });
          }).on('error', (err) => {
              console.error('Error fetching private repos:', err.message);
              fs.writeFileSync('private_repo_data.json', JSON.stringify([]));
          });
          EOF
          node generate_private_data.js
          echo "--- Content of private_repo_data.json (if exists) ---"
          cat private_repo_data.json || echo "private_repo_data.json not found or empty"
          echo "--- End of content ---"


      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3 # Updated
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # Updated